Documentation: Unified CRUD & Architecture RefactorThis document is the single source of truth for our backend refactor. It details the current broken state, the target clean state, and the specific fixes we're applying to each service file.1. The Goal: Why We're Doing ThisOur goal is to fix our "ruined" architecture. We have two core problems:Service Duplication: We have project_service.py and project_crud_service.py fighting each other.Architecture Inconsistency: todo_crud_service.py uses the new "polymorphic" project_items table (âœ…), while note_crud_service.py and document_crud_service.py are using old, broken, legacy tables (ðŸ›‘).The plan is to unify all services and make every module use the same polymorphic project_items system.2. Current Architecture Analysis (The "Before" Picture)This is the state of our app right now.Service FileProject Logic StatusAnalysis (The "Why")project_service.pyðŸŸ¡ Legacy / ConflictedHas some new logic (handle_polymorphic_associations) but also old, duplicated logic.project_crud_service.pyðŸŸ¡ Hybrid / ConflictedHas newer CRUD logic but is also full of duplicated code and legacy document_ / note_ logic.todo_crud_service.pyâœ… GoodThis is our "gold standard." It correctly uses project_items for everything.note_crud_service.pyðŸ›‘ Critically BrokenCalls the non-existent handle_associations function. All "read" logic (like list_notes) points to the note_projects table we deleted.document_crud_service.pyðŸ›‘ Critically BrokenSame as note_crud_service. It also has a ton of duplicated badge logic and is still trying to use the deleted is_project_exclusive and is_diary_exclusive columns.diary_crud_service.pyðŸ›‘ Broken (Habits)This file is correctly isolated from projects. However, all its habit-related functions (like get_habit_analytics_for_user) are broken. They call old functions from habit_data_service that we moved to unified_habit_analytics_service and habit_trend_analysis_service.3. File-by-File Refactor Log (What We Are Doing)This is the detailed, step-by-step fix for every file.On project_service.py & project_crud_service.pyAction: Merging both into a single, new project_service.py (our unified service).Refactor: The new service is 100% polymorphic.get_project_items is now a single generic function.reorder_documents is now reorder_project_items.delete_project now only queries project_items to find exclusive files.Bug Fix: We are deleting the massive, duplicated _batch_get_project_badges function from the old document_crud_service.py because our new project_service.py correctly calls shared_utilities_service.On note_crud_service.pySchema Fix:We deleted is_project_exclusive from the Note model and Pydantic schemas.We added are_projects_exclusive to the NoteCreate and NoteUpdate API schemas.Bug Fix (Write): We replaced the broken handle_associations call with the correct call to project_service.handle_polymorphic_associations (using item_type='Note').Bug Fix (Read): We updated list_notes and get_note_with_relations to read from project_items and use the ..._polymorphic badge loader.New Feature (Large Note): We implemented the "Large Note" logic.Notes and update_note now check the content size.If it's > 60KB, it saves to a file using _write_note_content_to_file and sets content_file_path.get_note_with_relations now reads from that file if content_file_path is not null.Inconsistency Fix: We are changing delete_note from a hard delete (db.execute(delete(...))) to a soft delete (note.is_deleted = True) to match the rest of the app's services.On document_crud_service.pySchema Fix:We are deleting all references to is_project_exclusive AND is_diary_exclusive from this file.We are adding are_projects_exclusive to the DocumentCreate and DocumentUpdate API schemas (just like we did for note.py).Bug Fix (Upload): We are fixing commit_document_upload to pass the new are_projects_exclusive field to the upload service and deleting the is_diary_exclusive line.Bug Fix (Read): We are fixing list_documents and _convert_doc_to_response to remove all references to the deleted is_project_exclusive and is_diary_exclusive columns.On diary_crud_service.pyProject Status: This file is correctly isolated from projects. No project_items logic here.Bug Fix (Habits): This is the next major task. All the habit_data_service.* calls (like get_habit_analytics_for_user, get_habit_insights_for_user, and get_habit_streak_for_user) are broken.Plan: We must update these functions to call the new services: unified_habit_analytics_service for analytics/insights and habit_trend_analysis_service for streak calculations.4. Core Architectural Principles (The "Why")This is the "how we think now" guide for future work.The "Bridge" Concept (API vs. DB):are_projects_exclusive (in note.py / document.py schemas): This is the API Field. It's the temporary "form" the user fills out. It does not go in the database.is_exclusive (in project_items table): This is the Database Column. It's the permanent storage.The are_... field is just the "bridge" to get the data from the user's request into the is_... column in the database.Association Tables are King ðŸ‘‘:Project Exclusivity: Handled only in the project_items table.Diary Exclusivity: Handled only in the note_documents table (via note_document_service.py).This is why we are deleting is_diary_exclusive from document_crud_service.py. Linking a file to a diary is a separate action handled by a different service (note_document_service.py).Soft Deletes Only:New Rule: We always use soft deletes (item.is_deleted = True). We never db.execute(delete(...)) for user data.Action: We are fixing note_crud_service.py to follow this rule.Bug Fix: We must also update delete_project to clean up the .txt files from soft-deleted notes, or they will be orphaned on the server.